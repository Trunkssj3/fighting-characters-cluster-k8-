# This file replaces the previous Deployment definitions with best practices.
# - App config split into ConfigMap/Secret
# - MongoDB moved to StatefulSet with persistent storage
# - English-only comments; no Hebrew characters

apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: fighting-characters
data:
  DB_NAME: "fighting_characters"
  COLLECTION_NAME: "characters"
  SEED_ON_START: "false"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: fighting-characters
type: Opaque
stringData:
  MONGO_URI: "mongodb://mongo:27017/fighting_characters"
  SECRET_KEY: "prod-secret"
---
apiVersion: v1
kind: Service
metadata:
  name: fighting-characters
  namespace: fighting-characters
  labels:
    app: fighting-characters
spec:
  selector:
    app: fighting-characters
  ports:
    - name: http
      port: 5000
      targetPort: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fighting-characters
  namespace: fighting-characters
spec:
  replicas: 1
  progressDeadlineSeconds: 900
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: fighting-characters
  template:
    metadata:
      labels:
        app: fighting-characters
    spec:
      terminationGracePeriodSeconds: 60
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
      containers:
        - name: fighting-characters
          image: 372595555088.dkr.ecr.ap-south-1.amazonaws.com/fightingcharacters:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
          command: ["/bin/sh","-c"]
          args:
            - |
              set -e
              export PYTHONPATH="/app:/app/app:${PYTHONPATH:-}"
              if [ -f /app/app/app.py ]; then
                cd /app/app
                MOD="app:app"
              elif [ -f /app/app.py ]; then
                cd /app
                MOD="app:app"
              else
                echo "Cannot find app.py at /app/app/app.py or /app/app.py" >&2
                exit 1
              fi
              echo "[startup] Using module: $MOD in $(pwd) PYTHONPATH=$PYTHONPATH"
              exec gunicorn -w 3 -b 0.0.0.0:5000 "$MOD" --timeout 60 --graceful-timeout 30
          envFrom:
            - configMapRef:
                name: app-config
            - secretRef:
                name: app-secrets
          lifecycle:
            preStop:
              exec:
                command: ["sh","-c","sleep 5"]
          startupProbe:
            httpGet:
              path: /health
              port: http
            failureThreshold: 30
            periodSeconds: 2
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: fighting-characters
  labels:
    app: mongo
spec:
  clusterIP: None
  selector:
    app: mongo
  ports:
    - name: mongo
      port: 27017
      targetPort: 27017
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
  namespace: fighting-characters
spec:
  serviceName: mongo
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      securityContext:
        runAsNonRoot: true
        fsGroup: 999
      containers:
        - name: mongo
          image: mongo:6.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: mongo
              containerPort: 27017
          args: ["--bind_ip_all"]
          livenessProbe:
            tcpSocket:
              port: 27017
            initialDelaySeconds: 20
            periodSeconds: 10
          readinessProbe:
            exec:
              command: ["mongosh","--quiet","--eval","db.adminCommand({ ping: 1 })"]
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: data
              mountPath: /data/db
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              memory: 512Mi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: gp3
        resources:
          requests:
            storage: 5Gi
