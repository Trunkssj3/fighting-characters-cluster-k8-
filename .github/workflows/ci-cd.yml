name: CD

on:
  repository_dispatch:
    types: [deploy-app]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag to deploy (leave empty to auto-pick latest)"
        required: false
        default: ""
      ecr_repository:
        description: "ECR repository name"
        required: true
        default: "fightingcharacters"
      region:
        description: "AWS region"
        required: true
        default: "ap-south-1"

permissions:
  id-token: write
  contents: read

env:
  ACCOUNT_ID: "372595555088"
  CLUSTER_NAME: "fighting-characters-cluster"
  K8S_NAMESPACE: "fighting-characters"
  DEPLOYMENT_NAME: "fighting-characters"
  CONTAINER_NAME: "fighting-characters"

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve inputs/payload
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            IMAGE_TAG_IN="${{ github.event.client_payload.image_tag }}"
            ECR_REPO_IN="${{ github.event.client_payload.ecr_repository }}"
            AWS_REGION_IN="${{ github.event.client_payload.region }}"
          else
            IMAGE_TAG_IN="${{ inputs.image_tag }}"
            ECR_REPO_IN="${{ inputs.ecr_repository }}"
            AWS_REGION_IN="${{ inputs.region }}"
          fi
          echo "IMAGE_TAG=${IMAGE_TAG_IN}"     >> "$GITHUB_ENV"
          echo "ECR_REPOSITORY=${ECR_REPO_IN}" >> "$GITHUB_ENV"
          echo "AWS_REGION=${AWS_REGION_IN}"   >> "$GITHUB_ENV"
          echo "image_tag=${IMAGE_TAG_IN}"     >> "$GITHUB_OUTPUT"
          echo "ecr_repository=${ECR_REPO_IN}" >> "$GITHUB_OUTPUT"
          echo "aws_region=${AWS_REGION_IN}"   >> "$GITHUB_OUTPUT"

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/gh-oidc-eks-deploy
          aws-region: ${{ steps.resolve.outputs.aws_region }}

      - name: Auto-pick latest image tag if missing
        if: env.IMAGE_TAG == ''
        shell: bash
        run: |
          set -euo pipefail
          TAG=$(aws ecr describe-images --repository-name "$ECR_REPOSITORY" --region "$AWS_REGION" \
                --query "reverse(sort_by(imageDetails,&imagePushedAt))[0].imageTags[0]" --output text)
          [ -z "$TAG" -o "$TAG" = "None" ] && { echo "No tags found in ECR '$ECR_REPOSITORY'"; exit 1; }
          echo "IMAGE_TAG=$TAG" >> "$GITHUB_ENV"
          echo "Using latest image tag: $TAG"

      - name: Install kubectl (stable)
        shell: bash
        run: |
          set -euo pipefail
          curl -sSL -o kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -sSL https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
          kubectl version --client=true

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region "$AWS_REGION" --name "$CLUSTER_NAME"

      - name: Install kustomize & yq
        shell: bash
        run: |
          set -euo pipefail
          KUSTOMIZE_VERSION=5.4.1
          curl -sSL -o kustomize.tar.gz "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${KUSTOMIZE_VERSION}/kustomize_v${KUSTOMIZE_VERSION}_linux_amd64.tar.gz"
          tar -xzf kustomize.tar.gz
          sudo mv kustomize /usr/local/bin/kustomize
          kustomize version

          YQ_VERSION=v4.44.3
          curl -sSL -o yq https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64
          chmod +x yq
          sudo mv yq /usr/local/bin/yq
          yq --version

      # ---------- הבטחת בריאות ה-ALB Controller (דיאגנוסטיקה + תיקון אוטומטי) ----------
      - name: Ensure AWS Load Balancer Controller is healthy (auto-heal)
        shell: bash
        run: |
          set -euo pipefail
          ns=kube-system

          health_check() {
            kubectl -n "$ns" rollout status deploy/aws-load-balancer-controller --timeout=5m
            echo "Waiting for webhook endpoints..."
            for i in {1..60}; do
              EPS=$(kubectl -n "$ns" get endpoints aws-load-balancer-webhook-service \
                    -o jsonpath='{.subsets[*].addresses[*].ip}' 2>/dev/null || true)
              [ -n "$EPS" ] && { echo "Webhook endpoints are ready: $EPS"; return 0; }
              sleep 5
            done
            return 1
          }

          echo "Checking current state..."
          if kubectl -n "$ns" get deploy aws-load-balancer-controller >/dev/null 2>&1; then
            if health_check; then
              echo "ALB Controller is healthy."
              exit 0
            fi
          fi

          echo "Collecting diagnostics..."
          kubectl -n "$ns" get deploy aws-load-balancer-controller -o wide || true
          kubectl -n "$ns" get pods -l app.kubernetes.io/name=aws-load-balancer-controller -o wide || true
          POD=$(kubectl -n "$ns" get pods -l app.kubernetes.io/name=aws-load-balancer-controller -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
          [ -n "$POD" ] && kubectl -n "$ns" describe pod "$POD" | sed -n '/Events:/,$p' || true
          [ -n "$POD" ] && kubectl -n "$ns" logs "$POD" --tail=200 || true

          echo "Attempting Helm upgrade/install..."
          helm repo add eks https://aw
